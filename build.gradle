import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths


buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.12.2LMLibBuild"    //他のLMMを前提とする場合は後半部を変更する
group = "littleMaidMob"
archivesBaseName = "SizeFor"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"

    mappings = "snapshot_20171003"
}

dependencies {
    compile fileTree(dir: './mods', include: '*.jar')

}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

[compileJava, compileTestJava].each { it.options.encoding = 'UTF-8' }

static String getSourceFileName() {
    /**
     * java直下にあるファイルで、ファイル名にModelLittleMaidが含まれるファイルの最も最初にマッチした物を返す
     * 基本的にModelLittleMaidを含むファイル名は一つしかないと仮定している
     *
     * Mint OSだと相対パスで記述できたけど、WindowsだとGradleがコケるのでやむを得ず絶対パス表記にした。
     * もし、このコードを使用される方が居たら、適切なパスに変更してください。
     */
    def workDir = Paths.get("D:\\Minecraft_Modding\\LittleMaidMobMultiModelSizeFor\\src\\main\\java")

    def sourceFileCodeName = null
    for (Path path in Files.list(workDir)) {
        String s = path.getFileName()
        if (s.indexOf("ModelLittleMaid") != -1) {
            sourceFileCodeName = s
            break
        }
    }
    String sourceFileStrPath = "D:\\Minecraft_Modding\\LittleMaidMobMultiModelSizeFor\\src\\main\\java" + sourceFileCodeName
    Path sourceFilePath = Paths.get(sourceFileStrPath)
    sourceFilePath.getFileName()
}

static String getBuildName(String fullSourceFileName) {
    /**
     * ModelLittleMaid_XXX.javaが引数に入れられたときXXXを返す
     */
    final int endIndex = fullSourceFileName.indexOf(".")
    final int startIndex = fullSourceFileName.indexOf("_") + 1
    fullSourceFileName.substring(startIndex, endIndex)
}

static void translateResourcesDirName() {
    /**
     * リトルメイドのマルチモデルクラス名に応じて適切なリソースディレクトリ名に置換する関数
     * _より前にあるパッケージ名については関知しない
     */
    Path resourcePath = null
    for (Path path in Files.list(Paths.get("D:\\Minecraft_Modding\\LittleMaidMobMultiModelSizeFor\\src\\main\\resources\\assets\\minecraft\\textures\\entity\\littleMaid"))) {
        resourcePath = path
        break
    }
    final String baseName = "SizeFor_" + getBuildName(getSourceFileName())
    final Path newResourcePath = resourcePath.resolveSibling(Paths.get(baseName))
    Files.move(resourcePath, newResourcePath)
}

//Create LittleMaid Model Zip File
task zipBuild(type: Zip, dependsOn: jar) {
    /**
     * ふわふーさんが公開している
     * https://github.com/firis-games/LittleMaidReengagedFirisPatch/blob/master/LittleMaidModelProject/build.gradle
     * から一部追記している。
     *
     *
     * ビルドとリファクタリングを繰り返すと古いリソースディレクトリ名の空ディレクトリが何故か一緒にビルドされてしまう(Ubuntu IntelliJでは発生しない)ため、
     * include... = falseで空フォルダはビルド対象外とした
     */
    includeEmptyDirs = false
    translateResourcesDirName()
    String archivesBaseName = "SizeFor" + getBuildName(getSourceFileName())

    archiveName = "littleMaidMob-${archivesBaseName}-${version}.${extension}"
    from sourceSets.main.output
}

artifacts {
    archives zipBuild
}